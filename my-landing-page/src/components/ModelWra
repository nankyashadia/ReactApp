import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { ENDPOINTS } from '../Utilities/Util';
import { FaBus, FaUtensils, FaHome, FaHiking, FaBriefcaseMedical } from 'react-icons/fa';
import './EventsSection.css';
import IMAGES from '../assets/images/image';
import VIDEOS from '../assets/videos/video';

const EventCard = ({ title, backgroundImage, showIcons }) => (
  <div className="event-card" style={{ backgroundImage: `url(${backgroundImage})` }}>
    <div className="overlay"></div>
    <div className="card-content">
      <h3 className="event-title"><em>{title}</em></h3>
      {showIcons && (
        <div className="icon-container" style={{ display: 'flex', justifyContent: 'center', gap: '10px' }}>
          <FaBus />
          <FaUtensils />
          <FaHome />
          <FaHiking />
          <FaBriefcaseMedical />
        </div>
      )}
    </div>
  </div>
);

const StyledEventCard = ({ title, backgroundImage }) => (
  <div className="relative rounded-lg shadow-lg border border-gray-300 overflow-hidden" style={{ width: '236px', height: '313px' }}>
    <div className="bg-cover bg-center h-60" style={{ backgroundImage: `url(${backgroundImage})` }} />
    <div className="absolute top-2 left-0 right-0 text-white text-lg font-bold uppercase text-center">{title}</div>
    <div className="bg-white py-2 text-center border-t">
      <h3 className="text-md font-semibold">{title}</h3>
    </div>
  </div>
);

const ExperienceCard = ({ videoUrl }) => (
  <div className="relative rounded-xl overflow-hidden shadow-lg cursor-pointer" style={{ width: '347px', height: '368px', marginRight: '20px' }}>
    <iframe
      className="w-full h-full"
      src={videoUrl.replace("watch?v=", "embed/")}
      title="Experience Video"
      frameBorder="0"
      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
      allowFullScreen
    ></iframe>
  </div>
);

const EventsSection = () => {
  const [highlightedEvents, setHighlightedEvents] = useState([]);
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchHighlightedEvents = async () => {
      try {
        const response = await axios.get(ENDPOINTS.HIGHLIGHTED_EVENTS);
        
        // Map API response to match component expectations
        const formattedData = Array.isArray(response.data) 
          ? response.data.map(event => ({
              title: event.heading,
              backgroundImage: event.bannerImages1 || IMAGES.defaultEventImage,
              about: event.about,
              calendarDates: event.calendarDates,
              schedule: event.schedule
            }))
          : [];

        setHighlightedEvents(formattedData);
        setError(null);
      } catch (err) {
        console.error("Error fetching highlighted events:", err);
        setError("Unable to load highlighted events. Please try again later.");
        // Set fallback data if API fails
        setHighlightedEvents([
          { 
            title: 'Featured Trek', 
            backgroundImage: IMAGES.KirimanjaloTrek,
            about: 'Experience the adventure of a lifetime',
            calendarDates: 'Coming soon',
            schedule: []
          },
          { 
            title: 'Wildlife Safari', 
            backgroundImage: IMAGES.kruger,
            about: 'Discover Africa\'s magnificent wildlife',
            calendarDates: 'Coming soon',
            schedule: []
          }
        ]);
      } finally {
        setIsLoading(false);
      }
    };

    fetchHighlightedEvents();
  }, []);

  // ... rest of your state declarations for snowTreks, summerEvents, etc.

  return (
    <div className="events-container p-4">
      {/* Highlighted Events */}
      <div className="section mb-10">
        <h6 className="text-lg font-semibold mb-2">Highlighted Events</h6>
        <p className="text-gray-600 mb-4">Recommended camps by our Instructors</p>

        {isLoading ? (
          <div className="loading-spinner">Loading events...</div>
        ) : (
          <>
            {error && <p className="text-red-500">{error}</p>}

            <div className="cards-container">
              {highlightedEvents.map((event, index) => (
                <EventCard
                  key={index}
                  title={event.title}
                  backgroundImage={event.backgroundImage}
                  showIcons={true}
                />
              ))}
            </div>
          </>
        )}
      </div>

      {/* ... rest of your component (snow treks, summer events, etc.) */}
    </div>
  );
};

export default EventsSection;